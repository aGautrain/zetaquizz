/** 
	Creation of the room with custom parameters if provided,
	schedule questions, closing of the room and auto-destruction
*/
macroscript createRoom(
	string name = "Unknown",
	string password = "",
	number delay = ROOM_CLOSE_DELAY,
	number questions = NUMBER_OF_QUESTIONS,
	boolean chronomode = false
) {
	
	var id = str:rnd36(6);
	
	var passwordHasBeenGiven = (password != "");
	
	// 1°) Creating the room
	
	var {result: {group: room}} = sudo zpUtils::GLOBAL_OWNER call zpGroupRecipe::createGroup({
		name: name,
		id: id,
		metadata: {
			creator: __userKey,
			openDelay: delay*1000,
			open: true,
			needPassword: passwordHasBeenGiven,
			password: password, // Feature : hash the password if needed
			chronoMode: chronomode,
			createdAt: time:now(),
			progressMaxQ: questions,
			progressCurrentQ: 0
		},
		members: []
	}) hardFail;
	
	// 2°) Scheduling room closure (including initialization of storage)
	
	sudo zpUtils::GLOBAL_OWNER scheduler.setTimeout({
		"parameter" : {
			"name": "closeRoom",
			"parameters": {"id": room.id}
		},
		"deploymentId" : code,
		"verb" : "call",
		"delay" : delay
	});
	
		
	
	// 3°) Scheduling questions sequence
	
	var delayOfQuestion = delay + 3;
	
	sudo zpUtils::GLOBAL_OWNER scheduler.setTimeout({
			"parameter": {
			"name": "sendQuestion",
			"parameters": {"room": room.id, "remaining": (questions - 1)}
		},
		"deploymentId": code,
		"verb": "call",
		"delay": delayOfQuestion
	});	
	

} return { room } on channel __selfName