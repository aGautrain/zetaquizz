/** preparing the storage dedicated for a room (scores, answers, ...) */
@Sudo(zpUtils::GLOBAL_OWNER)
macroscript initializeRoomStorage(string room) {
	
	// 1°) getting the members	(login/userKey)
	var {result: {group: {members: fullMembers }}} = sudo zpUtils::GLOBAL_OWNER call zpGroupRecipe::getGroup({id: room}) hardFail;
	
	// 2°) selecting only the userKey part
	var members = [];
	for member in fullMembers {
		members = list:add(members, member.userKey);
	}
	
	// 3°) erasing row
	sudo zpUtils::GLOBAL_OWNER datastorage.removeRow({table : 'rooms', key : room});
	
	// 4) allowing members to answer
	call theyCanAnswer({room: room}) hardFail;
	
	// 5°) initializing their scores to 0
	for member in members {
		call setScore({
			room: room,
			member: member,
			score: 0
		}) hardFail;
	}
	
	// 6°) giving a fake answer expected (will be changed each time a question is sent)
	call storeAnswerExpected({
		room : room,
		answer : 'None yet.'
	}) hardFail;
	
	// 7°) declaring that the game is not finished
	call setState({
		room: room,
		state: false
	}) hardFail;
	
}